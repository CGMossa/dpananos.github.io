---
title: Estimating the Shifted Beta Geometric Model in Stan
date: "2023-11-20"
code-fold: true
echo: true
fig-cap-location: top
categories: []
number-sections: false
draft: false
---


```{r}
library(tidyverse)
library(cmdstanr)
```

The shifted beta geometric model (sBG) is a model that is used to forecast retention/survival of users in contractual settings (think netflix, disney plus, tinder gold, etc). The model is quite simple and posits:

* At the end of each period, a customer flips a coin: "heads" she cancels he contract, "tails" she renews it.
* For each individual, the probability of a coin coming up "heads" does not change over time
* The probabiliuty of heads varies across customers.  Fader and Hardie motivate the model in their paper *How to Project Customer Retention* and even provide a way to fit the model in excel. Neat!

Excel isn't a great tool for fitting models, so Let's write this in Stan.

## sBG in Stan

The two things we need are the probability density function and the survival function. Fader and Hardie provide these in their paper.  Mathematically, the probability density and survival function are

$$ P(T=t \mid \alpha, \beta) = \dfrac{B(\alpha+1, \beta+t-1)}{B(\alpha, \beta)} \>,$$

$$ S(T=t \mid \alpha, \beta) = \dfrac{B(\alpha, \beta+t)}{B(\alpha, \beta)} \>. $$
Here, $B(\alpha, \beta)$ is the beta function *and not the beta distribution* (I made that mistake early).  Stan operates on the log scale, and so we'll have to take the log of these.  Stan has a log beta function called `lbeta` so we'll use that in our functions for the density and survival function.

```{r}
#| class-output: stan
#| echo: false
code_lines <- readLines("sbg.stan")

code_lines[1:12] %>% 
  cat(sep='\n')

```

The data we need to fit the model include:

* How many customers were lost at each time period, 
* The times at which customers were lost, and
* The total number of customers under observation

We'll also include an array of times at which to estimate the survival curve

```{r}
#| class-output: stan
#| echo: false
code_lines <- readLines("sbg.stan")

code_lines[13:23] %>% 
  cat(sep='\n')

```


Later, we'll need the last time point we observed customers who haven't churned.  This is the truncation time


```{r}
#| class-output: stan
#| echo: false
code_lines <- readLines("sbg.stan")

code_lines[24:26] %>% 
  cat(sep='\n')

```

All that is left to do is specify parameters, write the model block, and generate predictions for our survival curve.  The likelihood computations are shown in the paper I referenced, so I'll let you read that if you're interested


```{r}
#| class-output: stan
#| echo: false
code_lines <- readLines("sbg.stan")

code_lines[27:length(code_lines)] %>% 
  cat(sep='\n')

```
# Fitting the Model

Fader and Hardie provide an example in their appendix for fitting the model.  We'll use that data to check our fit.  Let's take a look at that data now

```{r}
#| fig-width: 8
#| fig-asp: 0.6
library(cmdstanr)
library(tidyverse)
library(tidybayes)

stan_data <- list(
  active = c(863 ,743 ,653 ,593 ,551 ,517 ,491),
  lost = c(131, 126 ,90 ,60 ,42 ,34 ,26),
  N = 7,
  n_total = 1000,
  time = 1:7,
  N_pred = 25,
  pred_times = seq(0, 12, length.out=25)
)


surv_plot <- tibble(time = stan_data$time, active=stan_data$active) %>% 
              ggplot(aes(time, active)) + 
              geom_point() + 
              geom_line() + 
              ylim(c(0, 1000)) + 
              ylab('Customers Surviving') +
              xlab('Time') + 
              see::theme_modern() + 
              theme(aspect.ratio = 1/1.61,
                    panel.grid.major = element_line())

surv_plot
```

Now, let's compare with the fit

```{r}
#| message: false
#| warning: false
model <- cmdstanr::cmdstan_model('sbg.stan')

fit <- model$sample(stan_data, refresh = 0)

pred_times <- tibble(pred_times=stan_data$pred_times, i = seq_along(pred_times))
fit_predict <- fit %>% 
               spread_draws(expected_surviving[i]) %>% 
               mutate(expected_surviving = expected_surviving * 1000) %>% 
               mean_qi() %>% 
               left_join(pred_times)



surv_plot + 
  geom_line(data=fit_predict, aes(pred_times, expected_surviving), inherit.aes = F, color='red') + 
  geom_ribbon(data=fit_predict, aes(pred_times, ymin = .lower, ymax=.upper), inherit.aes = F, fill='red', alpha=0.5)
```

Nice, not a bad fit.

Model extensions seem fairly straight forward.  You could maybe model alpha and beta much in the same way you do for a beta regression.


# References

Fader, Peter S., and Bruce GS Hardie. "How to project customer retention." Journal of Interactive Marketing 21.1 (2007): 76-90.