---
title: Revisiting Bayesian AB Testing
date: "2022-10-10"
code-fold: false
echo: false
fig-cap-location: top
categories: [Statistics, AB Testing, Bayes]
number-sections: false
draft: true
---


```{r}
library(tidyverse)

my_blue <- rgb(45/250, 62/250, 80/250, 1)

my_theme <- theme_classic() %+replace%
            theme(aspect.ratio = 1/1.61,
                  panel.grid.major = element_line())

theme_set(my_theme)
update_geom_defaults("line",   list(colour = my_blue))



ctr_A <- 0.001
ctr_B <- 0.0009
n_per_day <- 10000
max_days <- 20

a = 10
b = 90

compute_loss <- Vectorize(function(y_a, y_b, n_a, n_b){
  
  posterior_A <- rbeta(1000, a + y_a, b + n_a - y_a)
  posterior_B <- rbeta(1000, a + y_b, b + n_b - y_b)
  
  mean(pmax(posterior_A - posterior_B, 0))
  
})

```


```{r}
set.seed(3)
sims <- rerun(10000, {
  
  d <- tibble(day = rep(1, max_days),  
              n_obs = n_per_day,
              y_a = rbinom(max_days, n_obs/2, ctr_A),
              y_b = rbinom(max_days, n_obs/2, ctr_B),
  ) %>% 
    cumsum %>% 
    
    mutate(
      loss_B = compute_loss(y_a, y_b, n_obs/2, n_obs/2),
      loss_A = compute_loss(y_b, y_a, n_obs/2, n_obs/2)
    )
  
  
}) %>% 
  bind_rows(.id='sim')



```


```{r}

plotting_sims <- filter(sims, as.numeric(sim)<=100)

passing <- plotting_sims %>% 
  filter(day==20) %>% 
  mutate(
    pass = if_else(loss_B < 1e-5, "Passes", "Doesn't Pass")
  ) %>% 
  select(sim, day, loss_B,  pass)

plotting_sims %>% 
  left_join(select(passing, sim, pass), by = 'sim') %>%
  ggplot(aes(day, loss_B, color = pass)) + 
  geom_line(aes(group=sim), alpha = 0.5) + 
  geom_point(data=filter(passing, pass=="Passes"), aes(day, loss_B, color=pass), inherit.aes = F, show.legend=F) +
  geom_hline(aes(yintercept = 1e-5), color = 'red', linetype='dashed') +
  scale_y_log10() + 
  scale_color_manual(values = c(my_blue, 'red')) + 
  labs(
    x = 'Day', 
    y = 'Expected Decrease to Metric',
    subtitle = "Loss Switching from A to B", 
    color='') 
  
  

```


```{r}

passing <- plotting_sims %>% 
           group_by(sim) %>% 
           summarise(pass = if_else(min(loss_B)< 1e-5, "Passes", "Doesn't Pass"))

plotting_sims %>% 
  left_join(select(passing, sim, pass), by = 'sim') %>%
  ggplot(aes(day, loss_B, color = pass)) + 
  geom_line(aes(group=sim), alpha = 0.5) + 
  geom_hline(aes(yintercept = 1e-5), color = 'red', linetype='dashed') +
  scale_y_log10() + 
  scale_color_manual(values = c(my_blue, 'red')) + 
  labs(
    x = 'Day', 
    y = 'Expected Decrease to Metric',
    subtitle = "Loss Switching from A to B", 
    color='') 
  
```


```{r}
cutoffs <- 10^seq(-6, -3.25, 0.01)


loss_B_wait <- sims %>% 
          filter(day==20) %>% 
          pull(loss_B)

p_wait <- sapply(cutoffs, \(x) mean(loss_B_wait<x))


p_peek <- sapply(cutoffs,  \(x) sims %>% 
  group_by(sim) %>% 
  summarise(z = min(loss_B)<x) %>% 
  pull(z) %>% 
  mean)

wait <- tibble(cutoffs, p=p_wait, which = "Wait") 
peek <- tibble(cutoffs, p=p_peek, which = "Peek") 

bind_rows(wait, peek) %>% 
  ggplot(aes(cutoffs, p, color = which)) + 
  geom_line() + 
  scale_x_log10() + 
  scale_color_manual(values = c('red', my_blue))+
  labs(x='Threshold for Caring', 
       y='Probability fo Switching from A to B', 
       color='')
  
```


```{r}

a = 100
b = 99900

compute_loss <- Vectorize(function(y_a, y_b, n_a, n_b){
  
  posterior_A <- rbeta(1000, a + y_a, b + n_a - y_a)
  posterior_B <- rbeta(1000, a + y_b, b + n_b - y_b)
  
  mean(pmax(posterior_A - posterior_B, 0))
  
})

sims <- rerun(10000, {

  ctr_A <- rbeta(1, 100, 99900)
  ctr_B<- rbeta(1, 100, 99900)
  
  d <- tibble(day = rep(1, max_days),  
              n_obs = n_per_day,
              y_a = rbinom(max_days, n_obs/2, ctr_A),
              y_b = rbinom(max_days, n_obs/2, ctr_B),
  ) %>% 
    cumsum %>% 
    
    mutate(
      loss_B = compute_loss(y_a, y_b, n_obs/2, n_obs/2),
      loss_A = compute_loss(y_b, y_a, n_obs/2, n_obs/2),
    )
  
  
}) %>% 
  bind_rows(.id='sim')

```


```{r}
lb <- sims |> 
  filter(day==20) |> 
  pull(loss_A)


thresh <- 10 ^seq(-6, -4, 0.01)
loss <- sapply(thresh, \(x) mean(lb<x))

tibble(thresh, loss) |> 
  ggplot(aes(thresh, loss)) + 
  geom_line() + 
  scale_x_log10() + 
  scale_y_log10() + 
  geom_abline()
```

