{
  "hash": "75b47d38bbc07076de20df0149336841",
  "result": {
    "markdown": "---\ntitle: PCA on The Tags for Cross Validated\ndate: \"2022-08-16\"\ncode-fold: false\necho: false\nfig-cap-location: top\ncategories: [Machine Learning]\nnumber-sections: false\n---\n\n\nSo I'm moving at the end of the month.  What better time than now to brush up on some SQL and machine learning.\n\n\nJulia Silge gave a [really good talk](https://www.rstudio.com/resources/rstudioconf-2018/understanding-pca-using-shiny-and-stack-overflow-data/) in 2018 about PCA ond tags on stack overflow.  She was able to interpret some of the components to infer some subgroups of users of stack overflow (front-end vs back-end, are they a Microsoft tech developer or not, are you an android dev or not, etc).  These principal components were able to shed some light on what drove the variation in questions asked.\n\nI love this talk, and I crib it all the time.  As of late, I've not been doing much SQL, so I figured I would recreate Julia's analysis using data from [cross validated](https://stats.stackexchange.com/).  But this time, with a twist!\n\nWhat if instead of understanding the drivers of variance in questions asked, we analyze the kinds of questions users answer.  This could give us insight into the type of analysts we have on cross validated.  The site is intended to be for statistical analysis, but it has a mix of prediction questions, machine learning questions, econometrics questions, and much more.  Hang around there long enough and you will see some familiar faces (mine included) and you get a pretty good sense of who answers what kinds of questions.\n\nI'm going to use data available from the stack exchange data explorer available [here](https://data.stackexchange.com/).  I've included a code box in this post with the query I've used.  I've sliced out the top 250 users as ranked by reputation and the top 100 tags as calculated by prevalence. We can use `{tidymodels}` to do a lot of the heay lifting.  Let's get to it.\n\n\n<details><summary>Click to see SQL Query </summary>\n<p>\n\n```\nwith QA_Tags as (\nselect\n\nA.Id as QuestionId,\nA.Title as QuestionTitle,\nA.Body as QuestionBody,\n\nB.Id as AnswerId,\nB.OwnerUserId,\nB.Body as AnswerBody,\n\nC.DisplayName,\ndense_rank() over (order by C.Reputation desc) as rnk,\n\nD.TagId,\nE.TagName\n\nfrom\n--Extract Answers from Posts Table\n(select * from Posts where PostTypeId = 2)  as B\n--Extract Questions from Posts Table\nleft join (select * from Posts where PostTypeId = 1)  as A\non  A.Id = B.ParentId\nleft join Users as C\non B.OwnerUserId = C.Id\nleft join PostTags as D\non A.Id = D.PostId\nleft join (select top 100 * from Tags where TagName is not NULL order by Count desc) as E\non D.TagId = E.Id)\n\nselect\nrnk,\nDisplayName, \nTagName,\ncount(distinct QuestionId) as N\nfrom QA_tags\nwhere rnk<=250\ngroup by rnk, DisplayName, TagName\norder by rnk\n```\n\n</p>\n</details>\n\n## Data & Modelling\n\nLet's Take a peek at the data, using me as an example.  Below are my top 10 tags as a percent of my total answers.  Looks like I like to answer questions about regression, hypothesis testing, and R most frequently.  Each of the top 250 users has data similar to this in my dataset.  I need to pivot it so that tags become features.  Then, I can normalize the data and perform PCA.\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Name </th>\n   <th style=\"text-align:left;\"> Tag </th>\n   <th style=\"text-align:left;\"> Percent </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Demetri Pananos </td>\n   <td style=\"text-align:left;\"> Regression </td>\n   <td style=\"text-align:left;\"> 11.42% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Demetri Pananos </td>\n   <td style=\"text-align:left;\"> Hypothesis-Testing </td>\n   <td style=\"text-align:left;\"> 6.01% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Demetri Pananos </td>\n   <td style=\"text-align:left;\"> R </td>\n   <td style=\"text-align:left;\"> 5.90% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Demetri Pananos </td>\n   <td style=\"text-align:left;\"> Machine-Learning </td>\n   <td style=\"text-align:left;\"> 5.46% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Demetri Pananos </td>\n   <td style=\"text-align:left;\"> Logistic </td>\n   <td style=\"text-align:left;\"> 4.85% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Demetri Pananos </td>\n   <td style=\"text-align:left;\"> Bayesian </td>\n   <td style=\"text-align:left;\"> 3.59% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Demetri Pananos </td>\n   <td style=\"text-align:left;\"> Statistical-Significance </td>\n   <td style=\"text-align:left;\"> 3.42% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Demetri Pananos </td>\n   <td style=\"text-align:left;\"> Confidence-Interval </td>\n   <td style=\"text-align:left;\"> 2.76% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Demetri Pananos </td>\n   <td style=\"text-align:left;\"> T-Test </td>\n   <td style=\"text-align:left;\"> 2.65% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Demetri Pananos </td>\n   <td style=\"text-align:left;\"> Generalized-Linear-Model </td>\n   <td style=\"text-align:left;\"> 2.32% </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Demetri Pananos </td>\n   <td style=\"text-align:left;\"> Probability </td>\n   <td style=\"text-align:left;\"> 2.32% </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nCheckout how dummy easy the analysis is with tidymodels.  I think I spent more time cleaning the data than I did modelling it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- recipe(rnk + DisplayName ~ ., data = d) %>% \n       step_normalize(all_numeric_predictors()) %>% \n       step_pca(all_numeric_predictors(), num_comp = 3) %>% \n       prep()\n\nprin_comps <- bake(rec, new_data = d) \nweights <- rec %>% \n           tidy(number = 2, type = \"coef\")\n```\n:::\n\n\nThe last two lines extract both the principal components and the weights for each tag on each component.  Now. we're ready to make some plots.\n\n\n## Principal Components\n\nThe results for the first 3 principal componensts are shown below.  I've shown the 20 most extreme components for clarity.\n\nThe first principal compnent has tags like \"Anova\", \"T-Test\" and \"SPSS\" as heavily weighted positive, while \"Machine Learning\", \"Mathematical Statistics\" and \"Probability\" are all weighted heavily negative (the direction of the weights doesn't matter, it isn't like one direction is better or worse).  To me, I read this as \"Beginner\" vs \"Advanced\" answers.  Questions with the former tags are usually from users who are maybe taking a stats class for the first time and are learning about the t test or Anova.  The dead give away for this is the \"SPSS\" tag being weighted so heavily[^1].  Looking at more weights verifies this, with the negative weights being associated with topics like \"Neural Nets\", and \"Maximum Likelihod\" while the positive weights have tags like \"Statistical Significance\" and \"Interpretation\".\n\nNow remember, these components do not explain variance in questions.  They explain variance in the question *answers*!  So the first component is really about people who choose to answer simple versus complex topics.  The second principal component has a fairly straightforward interpretation.  This component explains variation between users who answer classical statistical questions versus those who opt to answer machine learning type questions.  Lastly, the third principal component seems to be distinguishing users who answer forecasting type questions (see tags like \"Arima\", \"Time Series\", \"Forecasting\", and \"Econometrics\") versus non forecasting type questions.  \n\n[^1]: Because once you've taken a few stats courses, you know bette than to use SPSS.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell layout-row='3' fig.dpi='240'}\n::: {.cell-output-display}\n![](index_files/figure-html/prin-comp-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/prin-comp-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/prin-comp-3.png){width=672}\n:::\n:::\n\n\nI think what is more interesting is that we can plot some of the more popular users on the site using the principal components.  In the first plot, I've scattered PC1 vs PC2.  Left to right means advanced vs simple questions.  It is no surpriuse to see whuber farther left and BruceET farther right.  Whuber can answer most anything, and I feel like he often accepts the challenge of a complex answer, opting to comment on simpler questions.  Bruce, on the other hand, will always answer a simple question very robustly. Top to bottom means classical stats vs machine learning.  I'm not surprised to see Frank Harrell closer to the bottom, as he has appeared in many questions if not only to scold people for using accuracy as a metric.  No surprise Topepo is on the bottom of this PC.  Interestingly, I'm kind of near the origin, if not a bit right of it.  Seems like I strike a good balance between ML and stats, but often opt to answer simpler questions.\n\nPlotting PC2 vs PC3 shows a very predictable pattern.  Users near the bottom are more forcasting types, so its no surprise that Rob Hyndman, Dimitris Rizopoulus (who does a lot of longitudinal work), and Stephan Kolassa are near the bottom.  I'm near the top, I have no clue about any of that stuff to be honest.\n\n::: {.cell layout-nrow=\"2\" fig.dpi='240'}\n::: {.cell-output-display}\n![](index_files/figure-html/prin-comp-3-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/prin-comp-3-2.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}