{
  "hash": "353fcbbb199aec371b4f8dd03b0033ce",
  "result": {
    "markdown": "---\ntitle: Interim Analysis & Group Sequential Designs Pt 2\ndate: \"2022-07-25\"\ncode-fold: true\nfig-cap-location: top\ncategories: [Statistics, AB Testing]\nnumber-sections: false\n---\n\n\n>This is the second post in a series on interim analysis and group sequential designs.\n>\n>- [Part 1](https://dpananos.github.io/posts/2022-07-06-gsd/)\n\nLast time, we noted that peeking in an AB test -- testing the data before the experiment was over -- was a really desirable thing.  It decreases the time we need to run a test, allowing us to iterate faster.  We also found that when we just run the test, our type one error inflates (although not as fast as we anticipated due to the correlation between test statistics at each stage).  The type one error inflates because the peeking implicitly defines a rejection region in the joint distribution which has too much probability.  We used a numerical search to find a critical value for both tests which allowed us to set the type one error rate to something more conservative.\n\nIn this post, we're going to talk about alpha spending, and alpha spending functions.\n\n\n::: {#fig-distirbutions .cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nmy_blue <- rgb(45/250, 62/250, 80/250, 1)\ntheme_set(theme_classic())\n\n\nset.seed(0)\n\n# Simulation Parameters\np<- 0.5\nn<- 250\nnsims <- 100\n\n# Run the simulation\nsims<-rerun(nsims, {\n  # K=1\n  x1 <- rbinom(1, n, p)\n  # K=2, accumulating data from each state\n  x2 <- x1 + rbinom(1, n, p)\n  \n  # Compute some various quantities we will need, like the Z score\n  K <- str_c(\"K=\", 1:2)\n  k <- 1:2\n  X <- c(x1, x2) / ((1:2)*n)\n  mu <- p\n  sds <- sqrt(p*(1-p)/(n*1:2))\n  Z <- (X-p)/sds\n  reject <- abs(Z)>1.96\n  \n  tibble(K, k, X, mu, sds, Z, reject)\n}) %>% \n  bind_rows(.id='sim')\n\n# Figure 1\nsims %>% \n  select(sim, K, Z) %>% \n  pivot_wider(names_from='K', values_from='Z') %>% \n  rename(Z1 = `K=1`, Z2=`K=2`) %>% \n  select(-sim) %>% \n  ggplot(aes(Z1, Z2))+\n  geom_point(color = 'dark gray', fill='black', alpha = 0.5, shape=21)+\n  scale_x_continuous(limits = c(-5, 5), expand=c(0,0))+\n  scale_y_continuous(limits = c(-5, 5), expand=c(0,0))+\n  annotate(\"rect\", xmin = -5, xmax = -1.96, ymin = -5, ymax = 5, alpha = .5, fill=my_blue)+\n  annotate(\"rect\", xmin = 1.96, xmax = 5, ymin = -5, ymax = 5, alpha = .5, fill=my_blue)+\n  annotate(\"rect\", xmin = -1.96, xmax = 1.96, ymin = 1.96, ymax = 5, alpha = .5, fill=my_blue)+\n  annotate(\"rect\", xmin = -1.96, xmax = 1.96, ymin = -1.96, ymax = -5, alpha = .5, fill=my_blue)+\n  geom_hline(aes(yintercept=-1.96), linetype='dashed')+\n  geom_hline(aes(yintercept=1.96), linetype='dashed')+\n  geom_vline(aes(xintercept=-1.96), linetype='dashed')+\n  geom_vline(aes(xintercept=1.96), linetype='dashed')+\n  theme(\n    panel.grid.major = element_line(),\n    aspect.ratio = 1,\n    text = element_text(size = 25)\n  )+\n  labs(x=expression(Z^(1)),\n       y=expression(Z^(2)))\n\n\n\nsims %>% \n  ggplot(aes(k, Z))+\n  geom_point(size = 2, alpha = 0.5)+\n  geom_line(aes(group=sim), size=1, alpha = 0.5)+\n  geom_hline(aes(yintercept=1.96), linetype='dashed')+\n  geom_hline(aes(yintercept=-1.96), linetype='dashed')+\n  annotate(\"rect\", xmin = 1, xmax = 2, ymin = 1.96, ymax = 5, alpha = .5, fill=my_blue)+\n  annotate(\"rect\", xmin = 1, xmax = 2, ymin = -1.96, ymax = -5, alpha = .5, fill=my_blue)+\n  scale_x_continuous(breaks = 1:2)+\n  scale_y_continuous(limits = c(-5, 5), expand=c(0,0))+\n  theme(\n    panel.grid.major = element_line(),\n    panel.grid.minor = element_line(),\n    aspect.ratio = 1,\n    text = element_text(size=25),\n    )+\n  labs(x='K')\n```\n\n::: {.cell-output-display}\n![Joint distirbution](index_files/figure-html/fig-distirbutions-1.png){#fig-distirbutions-1 width=768}\n:::\n\n::: {.cell-output-display}\n![Parallel coordinate plot](index_files/figure-html/fig-distirbutions-2.png){#fig-distirbutions-2 width=768}\n:::\n\nTwo ways to visualize the joint distribution of the means\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}